// Code generated by "enumer -type=Level -text -transform=lower -output log_level_string.go"; DO NOT EDIT.

package log

import (
	"fmt"
	"strings"
)

const _LevelName = "defaulttracedebuginfowarnerror"

var _LevelIndex = [...]uint8{0, 7, 12, 17, 21, 25, 30}

const _LevelLowerName = "defaulttracedebuginfowarnerror"

func (i Level) String() string {
	i -= -1
	if i < 0 || i >= Level(len(_LevelIndex)-1) {
		return fmt.Sprintf("Level(%d)", i+-1)
	}
	return _LevelName[_LevelIndex[i]:_LevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LevelNoOp() {
	var x [1]struct{}
	_ = x[Default-(-1)]
	_ = x[Trace-(0)]
	_ = x[Debug-(1)]
	_ = x[Info-(2)]
	_ = x[Warn-(3)]
	_ = x[Error-(4)]
}

var _LevelValues = []Level{Default, Trace, Debug, Info, Warn, Error}

var _LevelNameToValueMap = map[string]Level{
	_LevelName[0:7]:        Default,
	_LevelLowerName[0:7]:   Default,
	_LevelName[7:12]:       Trace,
	_LevelLowerName[7:12]:  Trace,
	_LevelName[12:17]:      Debug,
	_LevelLowerName[12:17]: Debug,
	_LevelName[17:21]:      Info,
	_LevelLowerName[17:21]: Info,
	_LevelName[21:25]:      Warn,
	_LevelLowerName[21:25]: Warn,
	_LevelName[25:30]:      Error,
	_LevelLowerName[25:30]: Error,
}

var _LevelNames = []string{
	_LevelName[0:7],
	_LevelName[7:12],
	_LevelName[12:17],
	_LevelName[17:21],
	_LevelName[21:25],
	_LevelName[25:30],
}

// LevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LevelString(s string) (Level, error) {
	if val, ok := _LevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Level values", s)
}

// LevelValues returns all values of the enum
func LevelValues() []Level {
	return _LevelValues
}

// LevelStrings returns a slice of all String values of the enum
func LevelStrings() []string {
	strs := make([]string, len(_LevelNames))
	copy(strs, _LevelNames)
	return strs
}

// IsALevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Level) IsALevel() bool {
	for _, v := range _LevelValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Level
func (i Level) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Level
func (i *Level) UnmarshalText(text []byte) error {
	var err error
	*i, err = LevelString(string(text))
	return err
}
