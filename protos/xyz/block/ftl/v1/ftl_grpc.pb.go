// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ftlv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VerbServiceClient is the client API for VerbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerbServiceClient interface {
	// Ping service for readiness.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Issue a synchronous call to a Verb.
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	// Issue an asynchronous call to a Verb.
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	// List the available Verbs.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type verbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVerbServiceClient(cc grpc.ClientConnInterface) VerbServiceClient {
	return &verbServiceClient{cc}
}

func (c *verbServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/xyz.block.ftl.v1.VerbService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verbServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, "/xyz.block.ftl.v1.VerbService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verbServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/xyz.block.ftl.v1.VerbService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verbServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/xyz.block.ftl.v1.VerbService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerbServiceServer is the server API for VerbService service.
// All implementations should embed UnimplementedVerbServiceServer
// for forward compatibility
type VerbServiceServer interface {
	// Ping service for readiness.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Issue a synchronous call to a Verb.
	Call(context.Context, *CallRequest) (*CallResponse, error)
	// Issue an asynchronous call to a Verb.
	Send(context.Context, *SendRequest) (*SendResponse, error)
	// List the available Verbs.
	List(context.Context, *ListRequest) (*ListResponse, error)
}

// UnimplementedVerbServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVerbServiceServer struct {
}

func (UnimplementedVerbServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedVerbServiceServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedVerbServiceServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedVerbServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeVerbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerbServiceServer will
// result in compilation errors.
type UnsafeVerbServiceServer interface {
	mustEmbedUnimplementedVerbServiceServer()
}

func RegisterVerbServiceServer(s grpc.ServiceRegistrar, srv VerbServiceServer) {
	s.RegisterService(&VerbService_ServiceDesc, srv)
}

func _VerbService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerbServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xyz.block.ftl.v1.VerbService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerbServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerbService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerbServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xyz.block.ftl.v1.VerbService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerbServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerbService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerbServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xyz.block.ftl.v1.VerbService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerbServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerbService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerbServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xyz.block.ftl.v1.VerbService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerbServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VerbService_ServiceDesc is the grpc.ServiceDesc for VerbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VerbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xyz.block.ftl.v1.VerbService",
	HandlerType: (*VerbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _VerbService_Ping_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _VerbService_Call_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _VerbService_Send_Handler,
		},
		{
			MethodName: "List",
			Handler:    _VerbService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xyz/block/ftl/v1/ftl.proto",
}

// DevelServiceClient is the client API for DevelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevelServiceClient interface {
	// Ping service for readiness.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Sync schema changes to and from the service.
	//
	// Each request and response contains the schema for a single module.
	SyncSchema(ctx context.Context, opts ...grpc.CallOption) (DevelService_SyncSchemaClient, error)
}

type develServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDevelServiceClient(cc grpc.ClientConnInterface) DevelServiceClient {
	return &develServiceClient{cc}
}

func (c *develServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/xyz.block.ftl.v1.DevelService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *develServiceClient) SyncSchema(ctx context.Context, opts ...grpc.CallOption) (DevelService_SyncSchemaClient, error) {
	stream, err := c.cc.NewStream(ctx, &DevelService_ServiceDesc.Streams[0], "/xyz.block.ftl.v1.DevelService/SyncSchema", opts...)
	if err != nil {
		return nil, err
	}
	x := &develServiceSyncSchemaClient{stream}
	return x, nil
}

type DevelService_SyncSchemaClient interface {
	Send(*SyncSchemaRequest) error
	Recv() (*SyncSchemaResponse, error)
	grpc.ClientStream
}

type develServiceSyncSchemaClient struct {
	grpc.ClientStream
}

func (x *develServiceSyncSchemaClient) Send(m *SyncSchemaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *develServiceSyncSchemaClient) Recv() (*SyncSchemaResponse, error) {
	m := new(SyncSchemaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DevelServiceServer is the server API for DevelService service.
// All implementations should embed UnimplementedDevelServiceServer
// for forward compatibility
type DevelServiceServer interface {
	// Ping service for readiness.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Sync schema changes to and from the service.
	//
	// Each request and response contains the schema for a single module.
	SyncSchema(DevelService_SyncSchemaServer) error
}

// UnimplementedDevelServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDevelServiceServer struct {
}

func (UnimplementedDevelServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDevelServiceServer) SyncSchema(DevelService_SyncSchemaServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncSchema not implemented")
}

// UnsafeDevelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevelServiceServer will
// result in compilation errors.
type UnsafeDevelServiceServer interface {
	mustEmbedUnimplementedDevelServiceServer()
}

func RegisterDevelServiceServer(s grpc.ServiceRegistrar, srv DevelServiceServer) {
	s.RegisterService(&DevelService_ServiceDesc, srv)
}

func _DevelService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevelServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xyz.block.ftl.v1.DevelService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevelServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevelService_SyncSchema_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DevelServiceServer).SyncSchema(&develServiceSyncSchemaServer{stream})
}

type DevelService_SyncSchemaServer interface {
	Send(*SyncSchemaResponse) error
	Recv() (*SyncSchemaRequest, error)
	grpc.ServerStream
}

type develServiceSyncSchemaServer struct {
	grpc.ServerStream
}

func (x *develServiceSyncSchemaServer) Send(m *SyncSchemaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *develServiceSyncSchemaServer) Recv() (*SyncSchemaRequest, error) {
	m := new(SyncSchemaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DevelService_ServiceDesc is the grpc.ServiceDesc for DevelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xyz.block.ftl.v1.DevelService",
	HandlerType: (*DevelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DevelService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncSchema",
			Handler:       _DevelService_SyncSchema_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "xyz/block/ftl/v1/ftl.proto",
}

// BackplaneServiceClient is the client API for BackplaneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackplaneServiceClient interface {
	// Ping service for readiness.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Get list of artefacts that differ between the server and client.
	GetArtefactDiffs(ctx context.Context, in *GetArtefactDiffsRequest, opts ...grpc.CallOption) (*GetArtefactDiffsResponse, error)
	// Upload artefacts to the server.
	UploadArtefact(ctx context.Context, opts ...grpc.CallOption) (BackplaneService_UploadArtefactClient, error)
}

type backplaneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackplaneServiceClient(cc grpc.ClientConnInterface) BackplaneServiceClient {
	return &backplaneServiceClient{cc}
}

func (c *backplaneServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/xyz.block.ftl.v1.BackplaneService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backplaneServiceClient) GetArtefactDiffs(ctx context.Context, in *GetArtefactDiffsRequest, opts ...grpc.CallOption) (*GetArtefactDiffsResponse, error) {
	out := new(GetArtefactDiffsResponse)
	err := c.cc.Invoke(ctx, "/xyz.block.ftl.v1.BackplaneService/GetArtefactDiffs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backplaneServiceClient) UploadArtefact(ctx context.Context, opts ...grpc.CallOption) (BackplaneService_UploadArtefactClient, error) {
	stream, err := c.cc.NewStream(ctx, &BackplaneService_ServiceDesc.Streams[0], "/xyz.block.ftl.v1.BackplaneService/UploadArtefact", opts...)
	if err != nil {
		return nil, err
	}
	x := &backplaneServiceUploadArtefactClient{stream}
	return x, nil
}

type BackplaneService_UploadArtefactClient interface {
	Send(*UploadArtefactRequest) error
	CloseAndRecv() (*UploadArtefactResponse, error)
	grpc.ClientStream
}

type backplaneServiceUploadArtefactClient struct {
	grpc.ClientStream
}

func (x *backplaneServiceUploadArtefactClient) Send(m *UploadArtefactRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *backplaneServiceUploadArtefactClient) CloseAndRecv() (*UploadArtefactResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadArtefactResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackplaneServiceServer is the server API for BackplaneService service.
// All implementations should embed UnimplementedBackplaneServiceServer
// for forward compatibility
type BackplaneServiceServer interface {
	// Ping service for readiness.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Get list of artefacts that differ between the server and client.
	GetArtefactDiffs(context.Context, *GetArtefactDiffsRequest) (*GetArtefactDiffsResponse, error)
	// Upload artefacts to the server.
	UploadArtefact(BackplaneService_UploadArtefactServer) error
}

// UnimplementedBackplaneServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBackplaneServiceServer struct {
}

func (UnimplementedBackplaneServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBackplaneServiceServer) GetArtefactDiffs(context.Context, *GetArtefactDiffsRequest) (*GetArtefactDiffsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtefactDiffs not implemented")
}
func (UnimplementedBackplaneServiceServer) UploadArtefact(BackplaneService_UploadArtefactServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadArtefact not implemented")
}

// UnsafeBackplaneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackplaneServiceServer will
// result in compilation errors.
type UnsafeBackplaneServiceServer interface {
	mustEmbedUnimplementedBackplaneServiceServer()
}

func RegisterBackplaneServiceServer(s grpc.ServiceRegistrar, srv BackplaneServiceServer) {
	s.RegisterService(&BackplaneService_ServiceDesc, srv)
}

func _BackplaneService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackplaneServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xyz.block.ftl.v1.BackplaneService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackplaneServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackplaneService_GetArtefactDiffs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtefactDiffsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackplaneServiceServer).GetArtefactDiffs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xyz.block.ftl.v1.BackplaneService/GetArtefactDiffs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackplaneServiceServer).GetArtefactDiffs(ctx, req.(*GetArtefactDiffsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackplaneService_UploadArtefact_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BackplaneServiceServer).UploadArtefact(&backplaneServiceUploadArtefactServer{stream})
}

type BackplaneService_UploadArtefactServer interface {
	SendAndClose(*UploadArtefactResponse) error
	Recv() (*UploadArtefactRequest, error)
	grpc.ServerStream
}

type backplaneServiceUploadArtefactServer struct {
	grpc.ServerStream
}

func (x *backplaneServiceUploadArtefactServer) SendAndClose(m *UploadArtefactResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *backplaneServiceUploadArtefactServer) Recv() (*UploadArtefactRequest, error) {
	m := new(UploadArtefactRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackplaneService_ServiceDesc is the grpc.ServiceDesc for BackplaneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackplaneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xyz.block.ftl.v1.BackplaneService",
	HandlerType: (*BackplaneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BackplaneService_Ping_Handler,
		},
		{
			MethodName: "GetArtefactDiffs",
			Handler:    _BackplaneService_GetArtefactDiffs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadArtefact",
			Handler:       _BackplaneService_UploadArtefact_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "xyz/block/ftl/v1/ftl.proto",
}
