syntax = "proto3";

package xyz.block.ftl.v1;

import "google/protobuf/timestamp.proto";
import "xyz/block/ftl/v1/schema/schema.proto";

option go_package = "github.com/TBD54566975/ftl/protos/xyz/block/ftl/v1;ftlv1";
option java_multiple_files = true;

message PingRequest {}
message PingResponse {}

message Metadata {
  message Pair {
    string key = 1;
    string value = 2;
  }
  repeated Pair values = 1;
}

message CallRequest {
  Metadata metadata = 1;

  schema.VerbRef verb = 2;
  bytes body = 3;
}
message CallResponse {
  message Error {
    string message = 1;
    // TODO: Richer error type.
  }

  oneof response {
    bytes body = 1;
    Error error = 2;
  }
}

message ListRequest {}
message ListResponse {
  repeated schema.VerbRef verbs = 1;
}

message SendRequest {
  Metadata metadata = 1;

  schema.VerbRef verb = 2;
  bytes body = 3;
}
message SendResponse {}

message LogEntry {
  enum Level {
    TRACE = 0;
    DEBUG = 1;
    INFO = 2;
    WARN = 3;
    ERROR = 4;
  }
  string message = 1;
  Level level = 2;
  string source = 3;
  google.protobuf.Timestamp timestamp = 4;
}

// VerbService is a common interface shared by multiple services for calling Verbs.
service VerbService {
  // Ping service for readiness.
  rpc Ping(PingRequest) returns (PingResponse);

  // Issue a synchronous call to a Verb.
  rpc Call(CallRequest) returns (CallResponse);

  // Issue an asynchronous call to a Verb.
  rpc Send(SendRequest) returns (SendResponse);

  // List the available Verbs.
  rpc List(ListRequest) returns (ListResponse);
}

message SyncSchemaRequest {
  schema.Module schema = 1;
}
message SyncSchemaResponse {
  schema.Module schema = 1;
  // If true, there are more schema changes immediately following this one.
  // If false, there still may be more schema changes in the future.
  bool more = 2;
}

// DevelService is the service that provides language-specific development and
// deployment functionality.
//
// The DevelService is responsible for hot reloading when code changes, and
// passing Verb calls through.
service DevelService {
  // Ping service for readiness.
  rpc Ping(PingRequest) returns (PingResponse);

  // Sync schema changes to and from the service.
  //
  // Each request and response contains the schema for a single module.
  rpc SyncSchema(stream SyncSchemaRequest) returns (stream SyncSchemaResponse);
}
